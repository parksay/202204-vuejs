//super

<template>
    <div>
        <input type="text" v-model="keywordSuper">
        <searchBox v-on:searchProductList="searchProductList" v-model:keywordSub2="keywordSuper" v-on:updateKeywordSub2="updateKeywordSuper"></searchBox>
        <productTable v-model:keywordSub1="keywordSuper" v-on:updateKeywordSub1="updateKeywordSuper"></productTable>
    </div>
</template>

<script>
    import searchBox from "@/components/sub/Searchbox.vue"
    import productTable from "@/components/sub/ProductTable.vue"
    export default {
        data() {
            return {
                keywordSuper:''
            }
        },
        components: {
            searchBox,
            productTable
        },
        methods: {
            updateKeywordSuper: function(param) {
                this.keywordSuper = param;
            }
        }
    }
</script>

//sub1
<template>
    <div>
        <table>
            <tr>
                <td>hello</td>
                <td>vue</td>
                <td>world</td>
            </tr>
            <tr>
                <td>this</td>
                <td>is</td>
                <td><input type="text" v-model="keywordSub1" v-on:input="inputEvent1"></td>
            </tr>
        </table>
    </div>
</template>
<script>
    export default {
        name: 'ProductTable',
        props: {
            keywordSub1: String
        },
        data() {
            return {
            }
        },
        methods: {
            inputEvent1: function(e) {
                console.log(e.target.value);
                this.$emit('updateKeywordSub1', e.target.value);
            }
        }
    }
</script>


//sub2
<template>
    <div>
        <input type="text" placeholder="검색어를 입력해 주세요." v-model="keywordSub2" v-on:input="inputEvent2">
    </div>
</template>

<script>
    export default {
        name: 'searchBox',
        props: {
            keywordSub2: String
        },
        data: function() {
            return {
            }
        },
        methods: {
            inputEvent2: function(e) {
                console.log(e.target.value);
                this.$emit('updateKeywordSub2', e.target.value);
            }
        },
    }
</script>


/////////////////////////////////////////////////
상위 컴포넌트와 하위 컴포넌트 간에 데이터 바인딩을 어떻게 할 수 있을까?
Vue에서 이것을 한 번에 지원하는 기능은 없다.
하지만 상위 컴포넌트에서 하위 컴포넌트로 값을 던져주는 기능은 있다.
그리고 하위 컴포넌트가 상위 컴포넌트를 호출하는 기능도 있다.
이러한 기능들을 잘 조합하면 양방향 데이터 바인딩 기능을 만들 수 있다.
먼저 상위 컴포넌트가 하위 컴포넌트로 값을 전달하는 기능을 알아보자.

<subComp v-model:dataFromSuper="dataToSub">
예를 들어 상위 컴포넌트에서 위와 같이 v-model을 쓴다고 해 보자.
v-model 디렉티브는 콜론 ':' 다음에 전달인자를 줄 수 있다.
이 전달인자는 전달 받는 컴포넌트 안에서 props로 받을 인자다.
등호 '=' 뒤로 변수 이름을 넣어준다.
이때 변수 이름은 전달 주는 컴포넌트 안에서 data와 연동된다.
//super
data() {
    return {
        dataToSub: ''
    }
}


<input type="text" v-model="dataFromSuper">
하위 컴포넌트에서는 props 옵션으로 전달 인자를 받을 수 있다.
예를 들어 하위 컴포넌트에서 v-model을 위와 같이 쓴다고 해 보자.
여기서 key라는 이름은 상위 컴포넌트에서 v-model 뒤로 붙여주는 전달인자와 이름이 같아야 한다.
예를 들어 상위 컴포넌트에서 v-model:hello="data" 라고 썼다면 하위 컴포넌트에서는 hello로 받아야 하고, 
v-model:world="data"라고 썼다면 하위 컴포넌트에서는 world로 받아야 한다.
상위 컴포넌트에서 전달해주는 key라는 이름은 
하위 컴포넌트에서 props 값과 이름이 같아야 한다.
//sub
props: {
    dataFromSuper: String
}

여기까지만 하면 상위로부터 하위로는 데이터가 연동된다.
하지만 하위로부터 상위로는 데이터가 연동되지 않는다.
즉, 상위 컴포넌트에서 값을 바꾸면 하위 컴포넌트에서 받아다 쓰는 값도 함께 바뀌지만,
하위 컴포넌트에서는 값을 바꾸더라도 상위 컴포넌트에 전달되지 못한다.
한 방향으로만 바인딩이 일어난다.

양방향으로 바꾸려면 데이터가 하위로부터 상위로도 연동되어야 한다.
데이터를 연결하려면 하위 컴포넌트에서 이벤트를 걸어주어야 한다.
이벤트를 거는 디렉티브는 v-on이다.
v-on 디렉티브는 전달인자로써 이벤트 종류를 줄 수 있다.
v-on에 전달인자를 넘기는 방법은 마찬가지로 콜론 ':' 뒤에 붙여주면 된다.
예를 들어 input이벤트는 v-on:input="myHandler"처럼 쓰면 되고,
change이벤트는 v-on:change="myHandler", click 이벤트는 v-on:click="myHandler" 등으로 쓰면 된다.
이벤트를 input이나 change 등으로 걸면 해당 요소의 값이 바뀔 때마다 특정 함수를 실행한다.
실행할 함수는 해당 하위 컴포넌트의 methods 속성에 정의해 두면 된다.
함수 안에서는 상위 컴포넌트를 호출하고, 바뀐 값을 함께 보낸다.
<input type="text" v-model="dataFromSuper" v-on:input="myCallFromSub">

props: {
    dataFromSuper: String
},
methods: {
    updateData: function(e) {
        this.$emit('myCallFromSub', e.target.value);
    }
}

emit은 하위 컴포넌트가 상위 컴포넌트를 호출하는 함수다.
전달 인자는 첫 번째로 이름이 필수로 들어가고, 두 번째 이후부터는 추가 인자가 들어간다.
this.$emit('myCallFromSub', e.target.value);
이렇게 하면 상위 컴포넌트에서는 'myCallFromSub'라는 이름으로 이벤트를 받아야 한다.
<subCompo v-on:myCallFromSub="myHandler" v-model:dataFromSuper="dataToSub"></subCompo>

상위 컴포넌트가 하위 컴포넌트로부터 호출을 받는 방법은 v-on을 이용한다.
v-on에 콜론 ':' 뒤로 전달인자를 주는데, 이 전달인자를 하위 컴포넌트가 emit함수를 호출할 때 첫 번째 인자로 넣어줬던 값과 일치하도록 만들어 준다.
하위 컴포넌트에서 this.$emit('hello'); 라고 호출했다면
상위 컴포넌트에서는 <subCompo v-on:hello="myHandler"> 라고 받아주면 되고,
하위 컴포넌트에서 this.$emit('world'); 라고 호출했다면
상위 컴포넌트에서는 <subCompo v-on:world="myHandler"> 라고 받아주면 된다.

상위 컴포넌트가 하위 컴포넌트로부터 호출을 받았다면,
호출에 응답할 함수를 정의해 두어야 한다.
방법은 똑같이 methods 속성에 정의해 두면 된다.
methods: {
    myHandler: function(data) {
        console.log('data from sub component: ' + data);
    }
}


이렇게 되면 상위 컴포넌트와 하위 컴포넌트 간의 데이터 바인딩이 이루어진다.
상위 컴포넌트에서는 하위 컴포넌트로 다음과 같이 값을 던져준다.
/<subCompo v-model:dataFromSuper="dataToSub">
/data() { return { dataToSub: 'Hello World!' }}
하위 컴포넌트에서는 상위 컴포넌트로부터 다음과 같이 값을 받는다.
<input type="text" v-model="dataFromSuper">
props: { dataFromSuper: String } 으로 받아준다.

하위 컴포넌트에서는 다음과 같이 상위 컴포넌트로 값을 쏘아준다.
/<input type="text" v-model="dataFromSuper" v-on:input="updateData">
/methods: {updateData: function(e) { this.$emit('myCallFromSub', e.target.value);  }}
상위 컴포넌트에서는 다음과 같이 값을 받아준다.
/<subCompo v-model:dataFromSuper="dataToSub" v-on:myCallFromSub="myHandler">
/methods: {myHandler: function(data) { this.data = data;  }}